name: Build & Publish

on:
  push:
    branches: 
      - main


permissions:
  contents: read


jobs:
  build:
    name: Build distribution üì¶
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.x"
    - name: Install pypa/build
      run: |
        python3 -m pip install build --user
    - name: Build a binary wheel and a source tarball
      run: python3 -m build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v3
      with:
        name: python-package-distributions
        path: dist/


  version_check:
    name: Check Version
    runs-on: ubuntu-latest
    outputs:
      PYPI_VERSION: ${{ steps.pypi_step.outputs.PYPI_VERSION }}
      CODE_VERSION: ${{ steps.code_step.outputs.CODE_VERSION }}
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.x"
    - name: Install requisites
      run: |
        pip install requests
    - name: Retrieve PYPI version
      id: pypi_step
      run: |
        python scripts/pypi_version.py >> $GITHUB_OUTPUT
        cat $GITHUB_OUTPUT
    - name: Retrieve CODE version
      id: code_step
      run: |
        python scripts/code_version.py >> $GITHUB_OUTPUT
        cat $GITHUB_OUTPUT


  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    needs:
    - build
    - version_check
    if: ${{ needs.version_check.outputs.PYPI_VERSION != needs.version_check.outputs.CODE_VERSION }}
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    - name: Download all the dists
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    - name: Tag check
      run: |
        echo $TAG_VER
      env:
        TAG_VER: v${{ needs.version_check.outputs.CODE_VERSION }}
    - uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: v${{ needs.version_check.outputs.CODE_VERSION }}
        prerelease: false
        title: v${{ needs.version_check.outputs.CODE_VERSION }}
        files: "dist/*"


  publish-testpypi:
    name: Publish Python üêç distribution üì¶ to TestPyPI
    needs:
    - create_release
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/astromodule
    permissions:
      contents: read
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution üì¶ to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/


  publish-pypi:
    name: Publish Python üêç distribution üì¶ to PyPI
    needs:
    - publish-testpypi
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/astromodule
    permissions:
      contents: read
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution üì¶ to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1