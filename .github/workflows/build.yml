name: Build Project

on:
  push:

permissions:
  contents: read


jobs:
  build:
    name: Build distribution ðŸ“¦
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.x"
    - name: Install pypa/build
      run: |
        python3 -m pip install build --user
    - name: Build a binary wheel and a source tarball
      run: python3 -m build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v3
      with:
        name: python-package-distributions
        path: dist/


  version_check:
    name: Check Version
    runs-on: ubuntu-latest
    outputs:
      PYPI_VERSION: ${{ steps.pypi_step.outputs.PYPI_VERSION }}
      CODE_VERSION: ${{ steps.code_step.outputs.CODE_VERSION }}
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.x"
    - name: Install requisites
      run: |
        pip install requests
    - name: Retrieve PYPI version
      id: pypi_step
      run: |
        python scripts/pypi_version.py >> $GITHUB_OUTPUT
        cat $GITHUB_OUTPUT
    - name: Retrieve CODE version
      id: code_step
      run: |
        python scripts/code_version.py >> $GITHUB_OUTPUT
        cat $GITHUB_OUTPUT


  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    needs:
    - build
    - version_check
    if: ${{ needs.version_check.outputs.PYPI_VERSION != needs.version_check.outputs.CODE_VERSION }}
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    - name: Download all the dists
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    - run: |
        echo $VVV
      env:
        VVV: ${{ needs.version_check.outputs.CODE_VERSION }}
    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "dist/*"
        draft: false
        prerelease: false
        tag: v${{ needs.version_check.outputs.CODE_VERSION }}
        commit: ${GITHUB_SHA}
        body: |
          AstroModule Release ${{ needs.version_check.outputs.CODE_VERSION }}